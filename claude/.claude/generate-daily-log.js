#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function generateDailyLog(targetDate = '2025-09-23') {
    const claudeFile = '/Users/helrabelo/.claude/CLAUDE.md';
    const outputFile = `/Users/helrabelo/obsidian-daily-entry-${targetDate}.md`;

    if (!fs.existsSync(claudeFile)) {
        console.log('‚ùå CLAUDE.md not found');
        return;
    }

    const content = fs.readFileSync(claudeFile, 'utf8');
    const lines = content.split('\n');

    let inTodaySection = false;
    let activities = [];
    let currentActivity = [];

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];

        // Check for target date header
        if (line.trim() === `### ${targetDate}`) {
            inTodaySection = true;
            continue;
        }

        // Check if we've moved to next date section
        if (inTodaySection && line.match(/^###\s+\d{4}-\d{2}-\d{2}/) && !line.includes(targetDate)) {
            break;
        }

        if (inTodaySection) {
            // Look for activity start (For [Company] on [Project])
            if (line.match(/^\*\*For .+ on .+\*\*/)) {
                // Save previous activity
                if (currentActivity.length > 0) {
                    activities.push(currentActivity);
                    currentActivity = [];
                }
                currentActivity.push(line);
            } else if (currentActivity.length > 0 && line.trim()) {
                currentActivity.push(line);
            }
        }
    }

    // Don't forget last activity
    if (currentActivity.length > 0) {
        activities.push(currentActivity);
    }

    // Generate daily log content
    const dateObj = new Date(targetDate);
    const formattedDate = dateObj.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    let dailyLogContent = `# Daily Log - ${formattedDate}\n\n`;

    if (activities.length === 0) {
        dailyLogContent += 'No Claude activities recorded for this date.\n';
    } else {
        dailyLogContent += `## Claude Activities (${activities.length} total)\n\n`;

        activities.forEach((activity, i) => {
            const activityText = activity.join('\n');
            dailyLogContent += `### Activity ${i + 1}\n`;
            dailyLogContent += activityText + '\n\n';
        });

        // Add summary
        dailyLogContent += `## Summary\n\n`;
        dailyLogContent += `Total activities completed: ${activities.length}\n\n`;

        // Extract companies/projects
        const companies = new Set();
        const projects = new Set();

        activities.forEach(activity => {
            const headerLine = activity[0];
            const match = headerLine.match(/^\*\*For (.+?) on (.+?)\*\*/);
            if (match) {
                companies.add(match[1]);
                projects.add(match[2]);
            }
        });

        if (companies.size > 0) {
            dailyLogContent += `Companies worked on: ${Array.from(companies).join(', ')}\n`;
        }
        if (projects.size > 0) {
            dailyLogContent += `Projects touched: ${Array.from(projects).join(', ')}\n`;
        }
    }

    dailyLogContent += '\n---\n*Generated by Claude Daily Log Automation*\n';

    // Write the file
    fs.writeFileSync(outputFile, dailyLogContent);

    console.log(`‚úÖ Daily log generated: ${outputFile}`);
    console.log(`üìä Activities extracted: ${activities.length}`);

    return {
        activities: activities.length,
        outputFile,
        companies: [...new Set(activities.map(a => {
            const match = a[0].match(/^\*\*For (.+?) on (.+?)\*\*/);
            return match ? match[1] : 'Unknown';
        }))],
        projects: [...new Set(activities.map(a => {
            const match = a[0].match(/^\*\*For (.+?) on (.+?)\*\*/);
            return match ? match[2] : 'Unknown';
        }))]
    };
}

// Run if called directly
if (require.main === module) {
    const targetDate = process.argv[2] || '2025-09-23';
    generateDailyLog(targetDate);
}

module.exports = { generateDailyLog };